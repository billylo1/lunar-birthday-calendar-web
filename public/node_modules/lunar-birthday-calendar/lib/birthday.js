'use strict';

var fs = require('fs');
var moment = require('moment');
var ical = require('ical-generator');
var padStart = require('lodash/padStart');
var Converter = require('./LunarSolarConverter.js');
var Lunar = Converter.Lunar;
var converter = Converter.converter;

function formatSolarDate(solar) {
    var year = solar.solarYear,
        month = padStart(solar.solarMonth, 2, '0'),
        day = padStart(solar.solarDay, 2, '0');
    return (`${year}-${month}-${day}`);
}

function generateCalendar(argsArray) {

    var cal = ical({
        name: "summary"});

    console.log(argsArray);

    for (var argIndex = 0; argIndex < argsArray.length; argIndex++) {
        var args = argsArray[argIndex];
        var currentYear = +new Date().getFullYear();
        var lunarBirthday = new Lunar(
            currentYear - 1, +args.lunar_month, +args.lunar_day,
            args['leep']
        );
        var calculateYearsCount = +args.count;
        var name = args.name;
        var summary = `${name}`;
        console.log(name);
        for (var i = 0; i < calculateYearsCount; i++) {
            lunarBirthday.lunarYear = lunarBirthday.lunarYear + 1;
            var solarBirthday = converter.LunarToSolar(lunarBirthday);

            var solarStartDate = moment(
                formatSolarDate(solarBirthday)
            ).hours(9).minutes(0).seconds(0).toDate();
            // var solarEndDate = moment(
            //    formatSolarDate(solarBirthday)
            // ).hours(9).minutes(30).seconds(0).toDate();

            cal.createEvent({
                start: solarStartDate,
                allDay: true,
                // end: solarEndDate,
                timestamp: new Date(),
                summary,
                description: `${name}`,
                // location: 'Home'
            });
        }
    }
    return cal;
}

module.exports = {
    generateCalendar
};

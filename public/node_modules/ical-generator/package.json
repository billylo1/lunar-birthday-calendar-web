{
  "_args": [
    [
      {
        "raw": "ical-generator@^0.2.7",
        "scope": null,
        "escapedName": "ical-generator",
        "name": "ical-generator",
        "rawSpec": "^0.2.7",
        "spec": ">=0.2.7 <0.3.0",
        "type": "range"
      },
      "/Users/billylo/web/billysusanaian/public/node_modules/lunar-birthday-calendar"
    ]
  ],
  "_from": "ical-generator@>=0.2.7 <0.3.0",
  "_id": "ical-generator@0.2.10",
  "_inCache": true,
  "_location": "/ical-generator",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ical-generator-0.2.10.tgz_1501530524510_0.814658522605896"
  },
  "_npmUser": {
    "name": "sebbo2002",
    "email": "mail@sebbo.net"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ical-generator@^0.2.7",
    "scope": null,
    "escapedName": "ical-generator",
    "name": "ical-generator",
    "rawSpec": "^0.2.7",
    "spec": ">=0.2.7 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/lunar-birthday-calendar"
  ],
  "_resolved": "https://registry.npmjs.org/ical-generator/-/ical-generator-0.2.10.tgz",
  "_shasum": "f3d91201411c63b26985b7c59bd5ed91801084ef",
  "_shrinkwrap": null,
  "_spec": "ical-generator@^0.2.7",
  "_where": "/Users/billylo/web/billysusanaian/public/node_modules/lunar-birthday-calendar",
  "author": {
    "name": "Sebastian Pekarek",
    "email": "mail@sebbo.net"
  },
  "bugs": {
    "url": "http://github.com/sebbo2002/ical-generator/issues",
    "email": "bugs@sebbo.net"
  },
  "dependencies": {},
  "description": "ical-generator is a small piece of code which generates ical calendar files",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.11.0",
    "grunt-contrib-watch": "^0.6.1",
    "istanbul": "^0.3.0",
    "mocha": "^1.20.1",
    "portfinder": "^0.2.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-q4TRRGIaG8McNeZRx9sF120vxVuZbPSAMiwn9GgI9+iRrrtUsLZnVUAO7dPP7XSXt+yrrrxP2LbQ+KEnUC6+JQ==",
    "shasum": "f3d91201411c63b26985b7c59bd5ed91801084ef",
    "tarball": "https://registry.npmjs.org/ical-generator/-/ical-generator-0.2.10.tgz"
  },
  "gitHead": "89f0d0c6cd5beff26ef773429cfb7e05ecb92cff",
  "homepage": "https://github.com/sebbo2002/ical-generator#readme",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "sebbo2002",
      "email": "mail@sebbo.net"
    }
  ],
  "name": "ical-generator",
  "optionalDependencies": {},
  "preferGlobal": false,
  "readme": "# ical-generator\n\n[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](LICENSE)\n[![CI Status](https://img.shields.io/travis/sebbo2002/ical-generator.svg?style=flat-square)](https://travis-ci.org/sebbo2002/ical-generator)\n<!-- [![Test Coverage](https://sebbo.helium.uberspace.de/teamcity-badges/ICalGenerator_UnitTests/coverage-istanbul)](https://ci.sebbo.net/project.html?projectId=ICalGenerator&tab=preport_project1_Test_Coverage&guest=1) -->\n\nical-generator is a small piece of code which generates ical calendar files. I use this to generate subscriptionable\ncalendar feeds.\n\n\n## Installation\n\n\tnpm install ical-generator\n\n\n## Upgrade from 0.1.x\n\nical-generator 0.2.0 introduces a completely new API, but because you guys used 0.1.x a lot, the old API still works. So\nyou should be able to upgrade from ical-generator 0.1.x to 0.2.0 without any code changes. In case you need the old API\ndocs, you can find the deprecated documentation [here](https://github.com/sebbo2002/ical-generator/blob/0.1.10/README.md).\n\nIn case you have any issues with the new API, feel free to [create an issue](https://github.com/sebbo2002/ical-generator/issues/new).\n\n\n## Quick Start\n\n```javascript\nvar ical = require('ical-generator'),\n\thttp = require('http'),\n\tcal = ical({domain: 'github.com', name: 'my first iCal'});\n\n// overwrite domain\ncal.domain('sebbo.net');\n\ncal.createEvent({\n\tstart: new Date(),\n\tend: new Date(new Date().getTime() + 3600000),\n\tsummary: 'Example Event',\n\tdescription: 'It works ;)',\n\tlocation: 'my room',\n\turl: 'http://sebbo.net/'\n});\n\nhttp.createServer(function(req, res) {\n\tcal.serve(res);\n}).listen(3000, '127.0.0.1', function() {\n    console.log('Server running at http://127.0.0.1:3000/');\n});\n```\n\n\n## Just another example\n\n```javascript\nvar ical = require('ical-generator'),\n\n    // Create new Calendar and set optional fields\n    cal = ical({\n        domain: 'sebbo.net',\n        prodId: {company: 'superman-industries.com', product: 'ical-generator'},\n        name: 'My Testfeed',\n        timezone: 'Europe/Berlin'\n    });\n\n// You can also set values like this…\ncal.domain('sebbo.net');\n\n// … or get values\ncal.domain(); // --> \"sebbo.net\"\n\n// create a new event\nvar event = cal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    timestamp: new Date(),\n    summary: 'My Event',\n    organizer: 'Sebastian Pekarek <mail@example.com>'\n});\n\n// like above, you can also set/change values like this…\nevent.summary('My Super Mega Awesome Event');\n\n// get the iCal string\ncal.toString(); // --> \"BEGIN:VCALENDAR…\"\n\n\n// You can also create events directly with ical()\ncal = ical({\n    domain: 'sebbo.net',\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [\n        {\n            start: new Date(),\n            end: new Date(new Date().getTime() + 3600000),\n            timestamp: new Date(),\n            summary: 'My Event',\n            organizer: 'Sebastian Pekarek <mail@example.com>'\n        }\n    ]\n}).toString();\n```\n\n\n\n## API\n\n### ical-generator\n\n#### ical([_Object_ options])\n\nCreates a new [Calendar](#calendar) ([`ICalCalendar`](#calendar)).\n\n```javascript\nvar ical = require('ical-generator'),\n    cal = ical();\n```\n\nYou can pass options to setup your calendar or use setters to do this.\n\n```javascript\nvar ical = require('ical-generator'),\n    cal = ical({domain: 'sebbo.net'});\n\n// is the same as\n\ncal = ical().domain('sebbo.net');\n\n// is the same as\n\ncal = ical();\ncal.domain('sebbo.net');\n```\n\n\n### Calendar\n\n#### domain([_String_ domain])\n\nUse this method to set your server's hostname. It will be used to generate the feed's UID. Default hostname is your\nserver's one (`require('os').hostname()`).\n\n\n#### prodId([_String_|_Object_ prodId])\n\nUse this method to overwrite the default Product Identifier (`//sebbo.net//ical-generator//EN`). `prodId` can be ether\na valid Product Identifier or an object:\n\n```javascript\ncal.prodId({\n\tcompany: 'My Company',\n\tproduct: 'My Product',\n\tlanguage: 'EN' // optional, defaults to EN\n});\n\n// OR\n\ncal.prodId('//My Company//My Product//EN');\n```\n\n\n#### name([_String_ name])\n\nUse this method to set your feed's name. Is used to fill `NAME` and `X-WR-CALNAME` in your iCal file.\n\n\n#### url([_String_ url])\n\nUse this method to set your feed's URL.\n\n```javascript\nvar cal = ical().url('https://example.com/calendar.ical');\n```\n\n\n#### timezone([_String_ timezone])\n\nUse this method to set your feed's timezone. Is used to fill `TIMEZONE-ID` and `X-WR-TIMEZONE` in your iCal.\n\n```javascript\nvar cal = ical().timezone('Europe/Berlin');\n```\n\n#### method([_String_ method])\n\nCalendar method. May be any of the following: `publish`, `request`, `reply`, `add`, `cancel`, `refresh`, `counter`, `declinecounter`.\n\n\n#### ttl([_Number_ ttl])\n\nUse this method to set your feed's time to live. Is used to fill `REFRESH-INTERVAL` and `X-PUBLISHED-TTL` in your iCal.\n\n```javascript\nvar cal = ical().ttl(60 * 60 * 24);\n```\n\n\n#### createEvent([_Object_ options])\n\nCreates a new [Event](#event) ([`ICalEvent`](#event)) and returns it. Use options to prefill the event's attributes.\nCalling this method without options will create an empty event.\n\n```javascript\nvar ical = require('ical-generator'),\n    cal = ical(),\n    event = cal.createEvent({summary: 'My Event'});\n\n// overwrite event summary\nevent.summary('Your Event');\n```\n\n\n#### events([_Object_ events])\n\nAdd Events to calendar or return all attached events.\n\n```javascript\nvar cal = ical();\ncal.events([\n    {\n        start: new Date(),\n        end: new Date(new Date().getTime() + 3600000),\n        summary: 'Example Event',\n        description: 'It works ;)',\n        url: 'http://sebbo.net/'\n    }\n]);\n\ncal.events(); // --> [ICalEvent]\n```\n\n\n#### save(**_String_ file**[, _Function_ cb])\n\nSave Calendar to disk asynchronously using [fs.writeFile](http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_options_callback).\n\n\n#### saveSync(**_String_ file**)\n\nSave Calendar to disk synchronously using [fs.writeFileSync](http://nodejs.org/api/fs.html#fs_fs_writefilesync_filename_data_options).\n\n\n#### serve(**_http.ServerResponse_ response**)\n\nSend Calendar to the User when using HTTP. See Quick Start above.\n\n\n#### toString()\n\nReturn Calendar as a String.\n\n\n#### toJSON()\n\nReturn a shallow copy of the calendar's options for JSON stringification. Can be used for persistance.\n```javascript\nvar cal = ical(),\n    json = JSON.stringify(cal);\n    \n// later\ncal = ical(json);\n```\n\n#### length()\n\nReturns the ammount of events in the calendar.\n\n\n#### clear()\n\nEmpty the Calender.\n\n\n\n### Event\n\n#### uid([_String_|_Number_ uid]) or id([_String_|_Number_ id])\n\nUse this method to set the event's ID. If not set, an UID will be generated randomly.  When output, the ID will be suffixed with '@' + your calendar's domain.\n\n\n#### sequence([_Number_ sequence])\n\nUse this method to set the event's revision sequence number of the\ncalendar component within a sequence of revisions.\n\n\n#### start([_Date_ start])\n\nAppointment date of beginning as Date object. This is required for all events!\n\n\n#### end([_Date_ end])\n\nAppointment date of end as Date object.\n\n\n#### timezone([_String_ timezone])\n\nUse this method to set your event's timezone using the TZID property parameter on start and end dates, as per [date-time form #3 in section 3.3.5 of RFC 554](https://tools.ietf.org/html/rfc5545#section-3.3.5).\n\nThis and the 'floating' flag (see below) are mutually exclusive, and setting a timezone will unset the 'floating' flag.  If neither 'timezone' nor 'floating' are set, the date will be output with in UTC format (see [date-time form #2 in section 3.3.5 of RFC 554](https://tools.ietf.org/html/rfc5545#section-3.3.5)).\n\n\n#### timestamp([_Date_ stamp]) or stamp([_Date_ stamp])\n\nAppointment date of creation as Date object. Default to `new Date()`.\n\n\n#### allDay([_Boolean_ allDay])\n\nWhen allDay == true -> appointment is for the whole day\n\n\n#### floating([_Boolean_ floating])\n\nAppointment is a \"floating\" time. From [section 3.3.12 of RFC 554](https://tools.ietf.org/html/rfc5545#section-3.3.12):\n\n> Time values of this type are said to be \"floating\" and are not\n> bound to any time zone in particular.  They are used to represent\n> the same hour, minute, and second value regardless of which time\n> zone is currently being observed.  For example, an event can be\n> defined that indicates that an individual will be busy from 11:00\n> AM to 1:00 PM every day, no matter which time zone the person is\n> in.  In these cases, a local time can be specified.\n\nThis and the 'timezone' setting (see above) are mutually exclusive, and setting the floating flag will unset the 'timezone'.  If neither 'timezone' nor 'floating' are set, the date will be output with in UTC format (see [date-time form #2 in section 3.3.5 of RFC 554](https://tools.ietf.org/html/rfc5545#section-3.3.5)).\n\n\n#### repeating([_Object_ repeating])\n\nAppointment is a repeating event\n\n```javascript\nevent.repeating({\n    freq: 'MONTHLY', // required\n    count: 5,\n    interval: 2,\n    until: new Date('Jan 01 2014 00:00:00 UTC'),\n    byDay: ['su', 'mo'], // repeat only sunday and monday\n    byMonth: [1, 2], // repeat only in january und february,\n    byMonthDay: [1, 15], // repeat only on the 1st and 15th\n    exclude: [new Date('Dec 25 2013 00:00:00 UTC')] // exclude these dates\n});\n```\n\n\n#### summary([_String_ summary])\n\nAppointment summary, defaults to empty string.\n\n\n#### description([_String_ description])\n\nAppointment description\n\n\n#### htmlDescription([_String_ htmlDescription])\n\nSome calendar apps may support HTML descriptions. Like in emails, supported HTML tags and styling is limited. \n\n\n#### location([_String_ location])\n\nAppointment location\n\n\n#### organizer([_String_|Object organizer])\n\nAppointment organizer\n\n```javascript\ncal.organizer({\n    name: 'Organizer\\'s Name',\n    email: 'organizer@example.com'\n});\n\n// OR\n\ncal.organizer('Organizer\\'s Name <organizer@example.com>');\n```\n\n\n#### createAttendee([_Object_ options])\n\nCreates a new [Attendee](#attendee) ([`ICalAttendee`](#attendee)) and returns it. Use options to prefill the attendee's attributes.\nCalling this method without options will create an empty attendee.\n\n```javascript\nvar ical = require('ical-generator'),\n    cal = ical(),\n    event = cal.createEvent(),\n    attendee = event.createAttendee({email: 'hui@example.com', 'name': 'Hui'});\n\n// overwrite attendee's email address\nattendee.email('hui@example.net');\n\n// add another attendee\nevent.createAttendee('Buh <buh@example.net>');\n```\n\n\n#### attendees([_Object_ attendees])\n\nAdd Attendees to the event or return all attached attendees.\n\n```javascript\nvar event = ical().createEvent();\ncal.attendees([\n    {email: 'a@example.com', name: 'Person A'},\n    {email: 'b@example.com', name: 'Person B'}\n]);\n\ncal.attendees(); // --> [ICalAttendee, ICalAttendee]\n```\n\n\n#### createAlarm([_Object_ options])\n\nCreates a new [Alarm](#alarm) ([`ICalAlarm`](#alarm)) and returns it. Use options to prefill the alarm's attributes.\nCalling this method without options will create an empty alarm.\n\n```javascript\nvar ical = require('ical-generator'),\n    cal = ical(),\n    event = cal.createEvent(),\n    alarm = event.createAlarm({type: 'display', trigger: 300});\n\n// add another alarm\nevent.createAlarm({\n    type: 'audio',\n    trigger: 300, // 5min before event\n});\n```\n\n\n#### alarms([_Object_ alarms])\n\nAdd alarms to the event or return all attached alarms.\n\n```javascript\nvar event = ical().createEvent();\ncal.alarms([\n    {type: 'display', trigger: 600},\n    {type: 'audio', trigger: 300}\n]);\n\ncal.attendees(); // --> [ICalAlarm, ICalAlarm]\n```\n\n\n#### url([_String_ url])\n\nAppointment URL\n\n\n#### status([_String_ status])\n\nAppointment status. May be any of the following: `confirmed`, `tenative`, `cancelled`.\n\n\n\n### Attendee\n\n#### name([_String_ name])\n\nUse this method to set the attendee's name.\n\n\n#### email([_String_ email])\n\nThe attendee's email address. An email address is required for every attendee!\n\n\n#### role([_String_ role])\n\nSet the attendee's role, defaults to `REQ-PARTICIPANT`. May be one of the following: `req-participant`, `non-participant`\n\n\n#### status([_String_ status])\n\nSet the attendee's status. May be one of the following: `accepted`, `tentative`, `declined`\n\n\n#### type([_String_ type])\n\nSet the attendee's type. May be one of the following: `individual`, `group`, `resource`, `room`, `unknown` (See [Section 4.2.3](https://tools.ietf.org/html/rfc2445#section-4.2.3))\n\n\n\n#### delegatesTo(**_ICalAttendee_|_Object_ attendee**)\n\nCreates a new Attendee if passed object is not already an attendee. Will set the delegatedTo and delegatedFrom attributes.\n\n```javascript\nvar cal = ical(),\n    event = cal.createEvent(),\n    attendee = cal.createAttendee();\n\nattendee.delegatesTo({email: 'foo@bar.com', name: 'Foo'});\n```\n\n\n#### delegatesFrom(**_ICalAttendee_|_Object_ attendee**)\n\nCreates a new Attendee if passed object is not already an attendee. Will set the delegatedTo and delegatedFrom attributes.\n\n```javascript\nvar cal = ical(),\n    event = cal.createEvent(),\n    attendee = cal.createAttendee();\n\nattendee.delegatesFrom({email: 'foo@bar.com', name: 'Foo'});\n```\n\n\n\n### Alarm\n\n#### type([_String_ type])\n\nUse this method to set the alarm type. Right now, `audio` and `display` is supported.\n\n\n#### trigger([_Number_|_Date_ trigger]) / triggerBefore([_Number_|_Date_ trigger])\n\nUse this method to set the alarm time.\n\n```javascript\nvar cal = ical(),\n    event = cal.createEvent(),\n    alarm = cal.createAlarm();\n\nalarm.trigger(600); // -> 10 minutes before event starts\nalarm.trigger(new Date()); // -> now\n```\n\n\n#### triggerAfter([_Number_|_Date_ trigger])\n\nUse this method to set the alarm time.\n\n```javascript\nvar cal = ical(),\n    event = cal.createEvent(),\n    alarm = cal.createAlarm();\n\nalarm.triggerAfter(600); // -> 10 minutes after the event finishes\nalarm.triggerAfter(new Date()); // -> now\n```\n\n\n#### repeat([_Number_ repeat])\n\nUse this method to repeat the alarm.\n\n```javascript\nvar cal = ical(),\n    event = cal.createEvent(),\n\n// repeat the alarm 4 times every 5 minutes…\ncal.createAlarm({\n    repeat: 4,\n    interval: 300\n});\n```\n\n\n#### interval([_Number_ interval])\n\nUse this method to set the alarm's interval.\n\n```javascript\nvar cal = ical(),\n    event = cal.createEvent(),\n\n// repeat the alarm 4 times every 5 minutes…\ncal.createAlarm({\n    repeat: 4,\n    interval: 300\n});\n```\n\n\n#### attach([_String_|_Object_ attach])\n\nAlarm attachment; used to set the alarm sound if type = audio. Defaults to \"Basso\".\n\n```javascript\nvar cal = ical(),\n    event = cal.createEvent(),\n\nevent.createAlarm({\n    attach: 'https://example.com/notification.aud'\n});\n\n// OR\n\nevent.createAlarm({\n    attach: {\n        uri: 'https://example.com/notification.aud',\n        mime: 'audio/basic'\n    }\n});\n```\n\n\n#### description([_String_| description])\n\nAlarm description; used to set the alarm message if type = display. Defaults to the event's summary.\n\n\n\n\n## Tests\n\n```\nnpm test\n```\n\n\n## Copyright and license\n\nCopyright (c) Sebastian Pekarek under the [MIT license](LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/sebbo2002/ical-generator.git"
  },
  "scripts": {
    "test": "grunt && istanbul cover _mocha -- -R spec --no-colors"
  },
  "tonicExampleFilename": "./example/example_tonic.js",
  "version": "0.2.10"
}
